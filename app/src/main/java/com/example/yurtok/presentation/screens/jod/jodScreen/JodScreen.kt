package com.example.yurtok.presentation.screens.jod.jodScreen

import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.animateColorAsState
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.animation.with
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.constraintlayout.helper.widget.Grid
import com.example.yurtok.R
import com.example.yurtok.presentation.screens.jod.jodCard.Job
import com.example.yurtok.presentation.screens.jod.jodCard.RatingStars
import com.example.yurtok.presentation.screens.jod.jodCard.jobs
import kotlinx.coroutines.delay

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun JobScreen(name: String = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
              serviceType: String = "–Æ—Ä–∏—Å—Ç",
              serviceSubType: String = "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ",
              rating: Float = 4.8f,
              address: String = "–ú–æ—Å–∫–≤–∞, —É–ª. –ù–∞–≥–æ—Ä—Å–∫–∞—è",
              experience: String = "5 –ª–µ—Ç",
              needsEmployment: Boolean = true,
              freeConsultation: Boolean = true,
              workDays: String = "–ü–Ω‚Äì–ü—Ç",
              description: String = "–î–æ–±p—ã–π –¥–µ–Ω—å! M–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω! –û–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ—Ñe—Åc–∏–æ–Ωa–ª—å–Ω—ãe —é—Ä–∏–¥–∏—áe—Å–∫–∏–µ —Éc–ª—É–≥–∏ –ø–æ –≥pa–∂–¥a–Ωc–∫o–º—É –ø—Ä–∞–≤—É. 20 –ª–µ—Ç —ép–∏–¥–∏—á–µ—Å–∫o–≥o —Å—Ç–∞–∂a.\n" +
                      "\n" +
                      "‚úî\uFE0F –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Çe–ª–µ–π; \n" +
                      "‚úî\uFE0F C–ø–æp—ã, c–≤—è–∑–∞–Ω–Ω—ãe c –Ωe–¥–≤–∏–∂–∏–ºoc—Ç—å—é; \n" +
                      "‚úî\uFE0F –°–ø–æ—Ä—ã —Å –∑a—Å—Çpo–π—â–∏–∫a–º–∏ (–≤–∑—ãc–∫–∞–Ω–∏–µ c—Ç—Äo–∏—Çe–ª—å–Ω—ã—Ö –Ω–µ–¥–æc—Ç–∞—Ç–∫–æ–≤ –∏ –Ω–µ—Éc—Ço–π–∫–∏, —Ä–∞c—Ç–æ—Ä–∂e–Ω–∏e –î–î–£); \n" +
                      "‚úî\uFE0F B–∑—ãc–∫a–Ω–∏–µ –¥o–ª–≥–æ–≤, –Ω–µ—É—Å—Ç–æ–π–∫–∏, –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞ \n" +
                      "–ø–æ —Ä–∞—Å–ø–∏—Å–∫–∞–º, –¥–æ–≥–æ–≤–æ—Ä–∞–º, —Å —É—á—ë—Ç–æ–º –ø–µ–Ω–∏, —à—Ç—Ä–∞—Ñ–æ–≤, —Å—É–¥–µ–±–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤; \n" +
                      "‚úî\uFE0F –ê—Ä–µ–Ω–¥–Ω—ã–µ —Å–ø–æ—Ä—ã; \n" +
                      "‚úî\uFE0F –ñ–∏–ª–∏—â–Ω—ã–µ —Å–ø–æ—Ä—ã (–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∞, –≤—ã—Å–µ–ª–µ–Ω–∏—è/–≤—Å–µ–ª–µ–Ω–∏—è, –ø—Ä–∞–≤–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä–æ–π, —É—Ç—Ä–∞—Ç–∞, –≤—ã–ø–∏—Å–∫–∞ –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã —á–µ—Ä–µ–∑ —Å—É–¥, —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏, –Ω–∞–π–º–∞ –∏ –ø—Ä.); \n" +
                      "‚úî\uFE0F –°–ø–æ—Ä—ã —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏, –Ω–µ –≤—ã–ø–ª–∞—Ç–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –≤–æ–∑–º–µ—â–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—Ç —É–ø–ª–∞—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –ø—Ä–µ–º–∏–∏ –∑–∞ –Ω–∞–≤—è–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ö–æ–≤–∫—É, –≤–∑—ã—Å–∫–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –∑–∞–Ω–∏–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã, –≤–∑—ã—Å–∫–∞–Ω–∏–µ —Å –≤–∏–Ω–æ–≤–Ω–∏–∫–∞ –î–¢–ü, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —à—Ç—Ä–∞—Ñ—ã, –Ω–µ—É—Å—Ç–æ–π–∫–∏ \n" +
                      "‚úî\uFE0F –°–ø–æ—Ä—ã —Å –±–∞–Ω–∫–∞–º–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º; \n" +
                      "‚úî\uFE0F –°–µ–º–µ–π–Ω—ã–µ —Å–ø–æ—Ä—ã (—Ä–∞–∑–¥–µ–ª —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –æ–±—â–µ–Ω–∏—è, –±—Ä–∞—á–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä, –∞–ª–∏–º–µ–Ω—Ç—ã –∏ –¥—Ä.) \n" +
                      "‚úî\uFE0F –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã (–≤–∑—ã—Å–∫–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã, –Ω–µ—É—Å—Ç–æ–π–∫–∏, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ, –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –ø—Ä–∏–∫–∞–∑–∞ –æ–± —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º –∏ –¥—Ä.); \n" +
                      "‚úî\uFE0F –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–ø–æ—Ä—ã –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π. \n" +
                      "‚úî\uFE0F –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.",
              email: String = "ivan@example.com",
              phone: String = "+7 999 123-45-67",
              priceList: List<Pair<String, String>> = listOf(
                  "–°–¥–µ–ª–∫–∏ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é" to "5000 ‚ÇΩ",
                  "–ñ–∏–ª–∏—â–Ω—ã–µ —Å–ø–æ—Ä—ã" to "10000 ‚ÇΩ"
              )
) {
    var showConfirmation by remember { mutableStateOf(false) }
    val buttonText = if (showConfirmation) "–í–∞–º —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç—è—Ç" else "–°–≤—è–∑–∞—Ç—å—Å—è"
    val buttonColor by animateColorAsState(
        targetValue = if (showConfirmation) Color(0xFF4CAF50) else Color(0xFF6A88F5),
        animationSpec = tween(durationMillis = 300)
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFF6A88F5),
                        Color(0xFFA478E8)
                    )
                )
            )
    ) {
        Scaffold(
            bottomBar = {
                Button(
                    onClick = { showConfirmation = true },
                    enabled = !showConfirmation,
                    modifier = Modifier
                        .padding(16.dp)
                        .fillMaxWidth()
                        .height(56.dp),
                    shape = RoundedCornerShape(12.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = buttonColor,
                        disabledContainerColor = buttonColor
                    ),
                    elevation = ButtonDefaults.buttonElevation(
                        defaultElevation = 4.dp,
                        pressedElevation = 2.dp
                    )
                ) {
                    AnimatedContent(
                        targetState = buttonText,
                        transitionSpec = {
                            slideInVertically { height -> height } + fadeIn() with
                                    slideOutVertically { height -> -height } + fadeOut()
                        }
                    ) { text ->
                        Text(
                            text = text,
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                    }
                }
            }
        ) { paddingValues ->
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(bottom = 16.dp)
            ) {
                item {
                    Card(
                        modifier = Modifier
                            .padding(16.dp)
                            .fillMaxWidth(),
                        shape = RoundedCornerShape(24.dp),
                        elevation = CardDefaults.cardElevation(8.dp),
                        colors = CardDefaults.cardColors(
                            containerColor = Color.White.copy(alpha = 0.95f)
                        )
                    ) {
                        Column(modifier = Modifier.padding(24.dp)) {
                            // üîπ Header
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                modifier = Modifier.fillMaxWidth()
                            ) {
                                Box(
                                    modifier = Modifier
                                        .size(80.dp)
                                        .shadow(8.dp, CircleShape)
                                        .clip(CircleShape)
                                        .background(Color.White)
                                ) {
                                    Image(
                                        painter = painterResource(R.drawable.cat_),
                                        contentDescription = "Avatar",
                                        contentScale = ContentScale.Crop,
                                        modifier = Modifier.fillMaxSize()
                                    )
                                }

                                Spacer(modifier = Modifier.width(16.dp))

                                Column(modifier = Modifier.weight(1f)) {
                                    Text(
                                        text = name,
                                        style = MaterialTheme.typography.titleLarge,
                                        color = Color(0xFF2D2D2D)
                                    )
                                    Text(
                                        text = "$serviceType ‚Ä¢ $serviceSubType",
                                        style = MaterialTheme.typography.bodyMedium,
                                        color = Color(0xFF666666)
                                    )
                                    RatingStars(rating = rating)
                                }

                                IconButton(
                                    onClick = { /* TODO: Add to favorites */ },
                                    modifier = Modifier.size(32.dp)
                                ) {
                                    Icon(
                                        painter = painterResource(id = R.drawable.bookmark),
                                        contentDescription = "–ó–∞–∫–ª–∞–¥–∫–∞",
                                        tint = Color(0xFF6A88F5)
                                    )
                                }
                            }

                            Spacer(modifier = Modifier.height(16.dp))

                            // üîπ Location Chip
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                modifier = Modifier.padding(vertical = 8.dp)
                            ) {
                                Icon(
                                    painter = painterResource(R.drawable.location_on_24dp_e3e3e3),
                                    contentDescription = "Location",
                                    tint = Color(0xFF6A88F5),
                                    modifier = Modifier.size(20.dp)
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(
                                    text = address,
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = Color(0xFF444444)
                                )
                            }

                            Divider(color = Color(0xFFEEEEEE), thickness = 1.dp)

                            // üîπ Details Grid
                            LazyVerticalGrid(
                                columns = GridCells.Fixed(2),
                                modifier = Modifier
                                    .padding(vertical = 16.dp)
                                    .height(150.dp),
                                verticalArrangement = Arrangement.spacedBy(12.dp),
                                horizontalArrangement = Arrangement.spacedBy(16.dp)
                            ) {
                                items(listOf(
                                    "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã" to experience,
                                    "–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" to if (needsEmployment) "–ù—É–∂–Ω–æ" else "–ù–µ –Ω—É–∂–Ω–æ",
                                    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" to if (freeConsultation) "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" else "–ü–ª–∞—Ç–Ω–æ",
                                    "–ì—Ä–∞—Ñ–∏–∫" to workDays
                                )) { (title, value) ->
                                    GridItem(title = title, value = value)
                                }
                            }

                            Divider(color = Color(0xFFEEEEEE), thickness = 1.dp)

                            // üîπ Price List
                            Column(modifier = Modifier.padding(vertical = 16.dp)) {
                                Text(
                                    text = "–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã",
                                    style = MaterialTheme.typography.titleMedium,
                                    color = Color(0xFF2D2D2D)
                                )
                                Spacer(modifier = Modifier.height(12.dp))
                                priceList.forEach { (service, price) ->
                                    PriceListItem(service = service, price = price)
                                }
                            }

                            Divider(color = Color(0xFFEEEEEE), thickness = 1.dp)

                            // üîπ Description
                            Column(modifier = Modifier.padding(vertical = 16.dp)) {
                                Text(
                                    text = "–û —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ",
                                    style = MaterialTheme.typography.titleMedium,
                                    color = Color(0xFF2D2D2D)
                                )
                                Spacer(modifier = Modifier.height(8.dp))
                                Text(
                                    text = description,
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = Color(0xFF666666),
                                    lineHeight = 20.sp
                                )
                            }

                            // üîπ Contacts
                            Column(modifier = Modifier.padding(vertical = 16.dp)) {
                                Text(
                                    text = "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
                                    style = MaterialTheme.typography.titleMedium,
                                    color = Color(0xFF2D2D2D)
                                )
                                Spacer(modifier = Modifier.height(12.dp))
                                ContactItem(
                                    icon = R.drawable.mail_24dp_e3e3e3,
                                    value = email
                                )
                                ContactItem(
                                    icon = R.drawable.phone,
                                    value = phone
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
private fun GridItem(title: String, value: String) {
    Surface(
        shape = RoundedCornerShape(12.dp),
        color = Color(0xFFF5F5F5),
        modifier = Modifier.width(150.dp)
    ) {
        Column(modifier = Modifier.padding(12.dp)) {
            Text(
                text = title,
                style = MaterialTheme.typography.labelMedium,
                color = Color(0xFF666666)
            )
            Text(
                text = value,
                style = MaterialTheme.typography.titleSmall,
                color = Color(0xFF2D2D2D),
                modifier = Modifier.padding(top = 4.dp)
            )
        }
    }
}

@Composable
private fun PriceListItem(service: String, price: String) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            text = service,
            style = MaterialTheme.typography.bodyMedium,
            color = Color(0xFF444444)
        )
        Text(
            text = price,
            style = MaterialTheme.typography.titleSmall,
            color = Color(0xFF6A88F5),
            fontWeight = FontWeight.Bold
        )
    }
}

@Composable
private fun ContactItem(icon: Int, value: String) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier.padding(vertical = 8.dp)
    ) {
        Icon(
            painter = painterResource(id = icon),
            contentDescription = null,
            tint = Color(0xFF6A88F5),
            modifier = Modifier.size(20.dp)
        )
        Spacer(modifier = Modifier.width(12.dp))
        Text(
            text = value,
            style = MaterialTheme.typography.bodyMedium,
            color = Color(0xFF444444)
        )
    }
}


@Composable
@Preview
fun prev(){
    val job = jobs.get(1)
    JobScreen()
}